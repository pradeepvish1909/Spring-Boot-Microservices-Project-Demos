Project Reference : BasicAuthentication
Spring Security Basic Authentication Overview:
. Basic Auth is the most basic option to secure the REST APIs.
. Basic Auth uses an HTTP header in order to provide the username and password when making a request to a server. 
. Basic Auth uses Base 64 encoded username and password in the header. 
. Basic Authentication do not uses cookies, hence there is no concept of a session or logging out a user, which means each request has to carry that header in order to be authenticated. 

First create the spring boot project, add dependency 'spring-boot-starter-security', 'lombok', 'devtools', and 'spring-web'. 
Now create a controller class, and add the following code:
WelcomeController:
[
@RestController
@RequestMapping("/api")
public class WelcomeController {
	
	@GetMapping("/greeting")
	public String greeting(Authentication authentication) {
		String userName = authentication.getName();
		
		return "Spring Security In-memory Authentication Example - Welcome "+userName;
	}
	
	@GetMapping("/hello")
	public String getHello() {
		return "Hello World";
	}

	@GetMapping("/world")
	public String getWorld() {
		return "Hello World2.0";
	}
}
]
Next, lets configure spring security to use basic-in memory Authentication. Lets create SpringSecurityConfig class and add the following code to it:
SecurityConfig:
[
package com.example.demo.Security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {
	
	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception{
		http.csrf(csrf -> csrf.disable());
		
		http.authorizeHttpRequests(authorize ->
			authorize
			.requestMatchers("/api/greeting").hasRole("USER") //Only ROLE_USER can access
			.requestMatchers("/api/hello").hasRole("ADMIN") //Only ROLE_ADMIN can access
			.anyRequest().authenticated()
				); //Any other request must be authenticated
		http.httpBasic(Customizer.withDefaults());
		return http.build();
	}
	
	@Bean
	UserDetailsService userDetailsService() {
		UserDetails user1 = User.withUsername("ramesh").password(passwordEncoder().encode("rameshPassword")).roles("USER").build();
		UserDetails user2 = User.withUsername("suresh").password(passwordEncoder().encode("sureshPassword")).roles("USER").build();
		UserDetails admin = User.withUsername("mahesh").password(passwordEncoder().encode("maheshPassword")).roles("ADMIN").build();
		
		return new InMemoryUserDetailsManager(user1, user2, admin);
	}
}
]
By default, Spring Security enables both form-based and HTTP basic authentication. Here we are using httpBasic() element to define only Basic Authentication inside the SecurityFilterChain bean:
[
@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception{
		http.csrf(csrf -> csrf.disable());
		
		http.authorizeHttpRequests(authorize ->
			authorize
			.requestMatchers("/api/greeting").hasRole("USER") //Only ROLE_USER can access
			.requestMatchers("/api/hello").hasRole("ADMIN") //Only ROLE_ADMIN can access
			.anyRequest().authenticated()
				); //Any other request must be authenticated
		http.httpBasic(Customizer.withDefaults());
		return http.build();
	}
]
On specific endpoints we have set the roles as well. /api/greeting/ endpoint only accessible by role with USER and /api/hello/ endpoint only accessible by role with ADMIN.

In the below InMemoryUserDetailsManager Java Configuration, we have created three users, two users role with USER and one as ADMIN, and stores them in the InMemoryUserDetailsManager class object.
[
@Bean
	UserDetailsService userDetailsService() {
		UserDetails user1 = User.withUsername("ramesh").password(passwordEncoder().encode("rameshPassword")).roles("USER").build();
		UserDetails user2 = User.withUsername("suresh").password(passwordEncoder().encode("sureshPassword")).roles("USER").build();
		UserDetails admin = User.withUsername("mahesh").password(passwordEncoder().encode("maheshPassword")).roles("ADMIN").build();
		
		return new InMemoryUserDetailsManager(user1, user2, admin);
	}
]
Spring Security's InMemoryUserDetailsManager implements UserDetailsService to provide support for username-password based authentication that is stored in memory. 

Note that we are using PasswordEncoder to encode the password. Spring Security's PasswordEncoder interface is used to perform a one-way transformation of a password to let the password be stored securely. We are BCryptPasswordEncoder class which implements the PasswordEncoder interface, 
The BCryptPasswordEncoder class implementation uses the widely supported bcrypt algorithm to hash the passwords. 
[
    @Bean
    public static PasswordEncoder passwordEncoder(){
        return new BCryptPasswordEncoder();
    }
.password(passwordEncoder().encode("password"))
]


When we execute the project and test endpoints in Postman, users with role USER can access /api/greeting/ and /api/world/ and only users role with ADMIN can access /api/hello/ and /api/world/.
In order to test the REST APIs, we have to pass a username and password in the header, this is called a basic authentication. 
Basic Auth uses Base 64 encoded username and password in the header.
If we dont pass the username and password, we will get 401 status. If the user is not authorized we will get 403 Forbidden status. 